Maven is a build tool , help to test and run the java program independently 

Maven runs purely based on POM xml [project object model] , it stores the configuration details

Installation 

Download the Binary zip archive  apache-maven-3.6.0-bin.zip file maven apache website
Please note: it is open source , so no need to pay

Configure the variable and path details in your environmental variable gui , before doing all this install java on your machine , because maven is completely based on java

Start with maven

Cross check your maven by checking the version 

#mvn –version
1.	Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-24T20:41:47+02:00)
2.	Maven home: D:\apache-maven-3.6.0\bin\..
3.	Java version: 1.8.0_161, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.8.0_161\jre
4.	Default locale: nl_NL, platform encoding: Cp1252
5.	OS name: "windows 7", version: "6.1", arch: "amd64", family: "windows"

Use below command to create a project

For example if you are running this in d:/firstproject path

mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false

explanation

archetype:generate  creating a new archetype project
groupId=com.mycompany.app   a unique naming schema for the Java's package
artifactId=my-app  name of the jar file without version which we are going to create while executing the maven packages
archetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4  informing maven what archetype to use to create the initial structure of the project. Maven looks it up from the archetypeCatalog.
interactiveMode=false  no interactive with the maven

You may test the newly compiled and packaged JAR with the following command:

java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App  gives the output

this is how the directory structure will be there in maven [if you create maven with this -DgroupId=com.mycompany.app -DartifactId=my-app]
1.	my-app
2.	|-- pom.xml
3.	`-- src
4.	|-- main
5.	| `-- java
6.	| `-- com
7.	| `-- mycompany
8.	| `-- app
9.	| `-- App.java
10.	`-- test
11.	`-- java
12.	`-- com
13.	`-- mycompany
14.	`-- app
15.	`-- AppTest.java

As mentioned above POM xml is the heart of the maven , it guides the maven project with what and how to do..

url to know about pom  https://maven.apache.org/pom.html#Build

Basic POM XML files consist of 
1.	<project xmlns="http://maven.apache.org/POM/4.0.0"
2.	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
3.	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
4.	http://maven.apache.org/xsd/maven-4.0.0.xsd">
5.	<modelVersion>4.0.0</modelVersion>
6.	 
7.	<groupId> com.mycompany.app</groupId>
8.	<artifactId>my-app</artifactId>
9.	<version>1.0</version>
10.	</project>

If we use below command it will create a Default POM xml file like above ..

mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false

Dependencies - POM

By default almost all java programs needs some dependencies , so maven downloads and links the dependencies on compilation . As an added bonus, Maven brings in the dependencies of those dependencies too .

So go to maven repository using below url and search for your requirement and paste the same in your POM XML

https://mvnrepository.com/

such as here we need checkstyle plugin to check the complete code , checkstyle will give complete reports of your code warning and errors

so just search in maven repository and get the dependency codes and paste in your pom xml , it will help to fetch the same from internet and helps to run your java program

<dependency>
    <groupId>com.puppycrawl.tools</groupId>
    <artifactId>checkstyle</artifactId>
    <version>8.12</version>
</dependency>


One more example like combination of junit and checkstyle plugins

  <dependencies>
    
<dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <type>jar</type>
      <scope>test</scope>
      <optional>true</optional>
    </dependency>

<dependency>
    <groupId>com.puppycrawl.tools</groupId>
    <artifactId>checkstyle</artifactId>
    <version>8.12</version>
</dependency>

  </dependencies>

Build - POM

Build has two kinds of functions , They are the build element, that handles things like declaring your project's directory structure and managing plugins; and the reporting element,

1 ) base build  declaring the folder and file paths like where to generate the jar or war files also we can instruct the maven build to look for specifically 

Example of how to mentioning the target files..

<build>
  <defaultGoal>install</defaultGoal>
  <directory>${basedir}/target</directory>
  <finalName>${artifactId}-${version}</finalName>
  <filters>
    <filter>filters/filter1.properties</filter>
  </filters>
  ...
</build>

One more example of how to mention specifically to search for files

<build>
    ...
    <resources>
      <resource>
        <targetPath>META-INF/plexus</targetPath>
        <filtering>false</filtering>
        <directory>${basedir}/src/main/plexus</directory>
        <includes>
          <include>configuration.xml</include>
        </includes>
        <excludes>
          <exclude>**/*.properties</exclude>
        </excludes>
      </resource>
    </resources>
    <testResources>
      ...
    </testResources>
    ...
  </build>

2) build plugin  looping the plugin under build

Simple example

<build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
	   </plugins>
</build>

By mentioning with the few specifications 

  <build>
    ...
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.6</version>
        <extensions>false</extensions>
        <inherited>true</inherited>
        <configuration>
          <classifier>test</classifier>
        </configuration>
        <dependencies>...</dependencies>
        <executions>...</executions>
      </plugin>
    </plugins>
  </build>

Still more there in POM files such as Developers , contributors, profile , Continuous integration management , SCM , Mailing , repositories we can refer that in the below url
https://maven.apache.org/pom.html#Properties


Maven Build cycle



Thanks,
Naveen S M

